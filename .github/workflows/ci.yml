name: CI

# Триггеры для запуска рабочего процесса
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    # Используем macOS 14 для стабильности
    runs-on: macos-14

    steps:
      # 1. Клонирование репозитория
      # Этот шаг загружает вашу кодовую базу в среду выполнения CI.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Выбор версии Xcode
      # Явно указываем версию Xcode для обеспечения консистентности сборок.
      # Используем прямую команду вместо deprecated action.
      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_15.4.app/Contents/Developer

      # 3. Установка зависимостей
      # Устанавливаем SwiftLint для проверки стиля кода и xcpretty для форматирования вывода xcodebuild.
      - name: Install Dependencies
        run: |
          brew install swiftlint
          sudo gem install xcpretty

      # 4. Проверка проекта и резолв пакетов
      # Проверяем целостность проекта и резолвим Swift Package Manager зависимости
      - name: Resolve Package Dependencies
        run: |
          echo "Checking Xcode version..."
          xcodebuild -version
          echo "Verifying project structure..."
          ls -la Cinemark.xcodeproj/
          echo "Listing project info..."
          xcodebuild -project Cinemark.xcodeproj -list
          echo "Resolving package dependencies..."
          xcodebuild -project Cinemark.xcodeproj -resolvePackageDependencies

      # 5. Сборка и тестирование
      # Этот шаг выполняет основную работу:
      # - Динамически находит доступный симулятор iPhone, чтобы избежать ошибок, связанных с отсутствием конкретной версии.
      # - Запускает 'xcodebuild' с командами clean, build и test.
      # - Использует xcpretty для более чистого и читаемого вывода.
      - name: Build and Test
        run: |
          set -o pipefail && \
          UDID=$(xcrun simctl list devices available --json | jq -r '.devices | map(.[]) | .[] | select(.name | contains("iPhone")) | .udid' | head -n 1) && \
          echo "Found available simulator with UDID: $UDID" && \
          xcodebuild clean build test \
            -project Cinemark.xcodeproj \
            -scheme Cinemark \
            -destination "id=$UDID" \
            CODE_SIGNING_ALLOWED=NO \
          | xcpretty